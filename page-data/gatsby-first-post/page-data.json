{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/gatsby-first-post/",
    "result": {"data":{"cur":{"id":"97702295-f1c7-5d73-b581-0fac0f3b102b","html":"<h1 id=\"첫-포스트1\" style=\"position:relative;\"><a href=\"#%EC%B2%AB-%ED%8F%AC%EC%8A%A4%ED%8A%B81\" aria-label=\"첫 포스트1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫 포스트1</h1>","excerpt":"첫 포스트1","frontmatter":{"date":"January 01, 2022","title":"첫 포스트 테스트","categories":"블로그 featured","author":"Juko","emoji":"🔮"},"fields":{"slug":"/gatsby-first-post/"}},"next":null,"prev":{"id":"69770408-74a2-5c6f-8251-b04f7d6f45de","html":"<hr>\n<ul>\n<li>티스토리 블로그에서 포스팅한 내용을 옮겨왔습니다.</li>\n</ul>\n<hr>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<ul>\n<li>‘scope’ 는 자바스크립트를 포함한 모든 프로그래밍 언어의 기본적인 개념입니다.</li>\n<li>우리말로 번역하면 ‘범위’ 라는 뜻을 가지고 있습니다. 즉, 변수에 접근할 수 있는 범위라고 볼 수 있습니다.</li>\n<li>scope는 참조 대상 식별자(identifier)를 찾아내기 위한 규칙이며, 크게 2가지로 나뉩니다.\n<ul>\n<li>Global scope (전역 스코프)</li>\n<li>Local scope (지역 스코프)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"전역-스코프\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"전역 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 스코프</h3>\n<ul>\n<li>전역에 선언되어 있어, 어느 곳에서든지 해당 변수에 접근 할 수 있다는 의미입니다.</li>\n</ul>\n<h3 id=\"지역-스코프\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%97%AD-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"지역 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지역 스코프</h3>\n<ul>\n<li>해당 지역에서만 접근할 수 있어, 해당 지역을 벗어난 곳에서는 접근할 수 없다는 의미입니다.</li>\n<li>js 안에서만 좁혀보면, 함수 코드 블록이 만든 범위로, 함수 자신과 하위 함수에서만 참조 할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'juko'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// global scope</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printNmae</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> anotherName <span class=\"token operator\">=</span> <span class=\"token string\">'john'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// local scope</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>anotherName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>anotherName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<ul>\n<li>위의 예제에서, anotherName 은 printName 이라는 함수 안에 정의되어있어, 외부에서는 접근이 불가능합니다.</li>\n<li>반대로, printName 함수 안에서는 ‘name’ 이란 변수에 접근이 가능합니다.\n<ul>\n<li>이는 name 이 전역적인 위치에 선언되어있어 global scope 를 갖기 때문입니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"javascript-scope-의-특징\" style=\"position:relative;\"><a href=\"#javascript-scope-%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"javascript scope 의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript scope 의 특징</h3>\n<ul>\n<li>js 는 다른 언어들과 다르게 함수 레벨의 스코프를 가지고 있습니다.\n<ul>\n<li>타 언어들은 블록 단위의 스코프를 가지며, 이는 es6 이후로 let, const 를 통해 구현되었습니다.</li>\n</ul>\n</li>\n<li>일반적으로 함수의 상위 스코프가 어디인가를 파악하기 위해 2가지 패턴이 있습니다.\n<ul>\n<li>첫번째로는 함수를 <strong>어디서 호출하였는가</strong>에 따라 상위 스코프를 결정합니다.</li>\n<li>두번째로는 함수를 <strong>어디에 선언하였는가</strong>에 따라 상위 스코프를 결정합니다.\n<ul>\n<li>일반적으로 첫번째를 <strong>동적 스코프</strong>라 부르며, 두번째는 <strong>정적 스코프</strong> 또는 <strong>렉시컬 스코프</strong>라 부릅니다.</li>\n</ul>\n</li>\n<li>자바스크립트를 비롯한 대부분의 언어는 렉시컬 스코프를 따른다고 볼 수 있습니다.\n<ul>\n<li>즉, 자바스크립트의 렉시컬 스코프는 함수를 어디서 호출하는지가 아니라, <strong>함수를 어디에 선언하였는지</strong>에 따라 결정된다고 볼 수 있습니다. (매우중요!)</li>\n<li>여담으로, 스코프의 결정 방향은 함수를 어디에 선언하였는지에 따라 결정됩니다만…</li>\n<li>this 는 아니라는 점입니다. (아래에도 적겠지만, this 는 ‘함수의 호출 패턴’에 의해 결정됩니다.)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"this\" style=\"position:relative;\"><a href=\"#this\" aria-label=\"this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this</h1>\n<ul>\n<li>일반적으로 this 라는 표현은 자기 자신을 가리킵니다.</li>\n<li>그러나 JavaScript 에서의 this 는 조금 특이한데요.</li>\n<li>this 에 바인딩되는 객체 한가지가 아니라, <strong>해당 함수 호출 방식</strong>에 따라 this 바인딩되는 객체가 달라집니다.\n<ul>\n<li>즉, js 에서의 this 는 함수 호출 패턴에 따라 달라집니다.</li>\n<li>왜 그런 것인가? 에 대해서는 아래에 재밌는 포스팅이 있으니 한번 읽어보시면 좋을 것 같습니다.</li>\n<li><a href=\"https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42\">자바스크립트는 왜 프로토타입을 선택했을까</a></li>\n</ul>\n</li>\n<li>크게 4가지 케이스로 나눠볼 수 있습니다.</li>\n</ul>\n<h3 id=\"함수-호출-시-this\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-%EC%8B%9C-this\" aria-label=\"함수 호출 시 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 호출 시 this</h3>\n<ul>\n<li>이 때 this 는 전역 객체에 바인딩 됩니다.</li>\n<li>브라우저라면, 전역 객체는 window 에 바인딩 된다고 볼 수 있습니다.</li>\n</ul>\n<h3 id=\"메소드-호출-시-this\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%ED%98%B8%EC%B6%9C-%EC%8B%9C-this\" aria-label=\"메소드 호출 시 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 호출 시 this</h3>\n<ul>\n<li>이 때 this 는 해당 메소드를 소유한 객체를 this 로 가리킵니다.</li>\n<li>그런데 여기서, this 는 해당 메소드를 소유한 객체 뿐만 아니라, 해당 메소드를 호출한 객체에 바인딩 된다는 점입니다.</li>\n<li>이게 무슨 말인가 하면 아래 예제 코드를 보면 조금 더 이해하기 쉬울 겁니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'kevin'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">printName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> anotherPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'mary'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nanotherPerson<span class=\"token punctuation\">.</span>printName <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>printName<span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> kevin 이 출력됨!!</span>\nanotherPerson<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> mary 가 출력됨!!</span></code></pre></div>\n<ul>\n<li>위에서 this 는 <strong>함수 호출 패턴</strong> 에 의해 달라진다고 했습니다.</li>\n<li>즉, this 는 printName 을 정의한 시점에서 person 이란 객체를 가리키는 것이 아니라,\n<ul>\n<li>해당 메소드를 호출한 시점(person.printName()) 에서 결정된다고 생각하시면 됩니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"call--apply--bind-시-this\" style=\"position:relative;\"><a href=\"#call--apply--bind-%EC%8B%9C-this\" aria-label=\"call  apply  bind 시 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.call() / .apply() / .bind() 시 this</h3>\n<ul>\n<li>es6 가 본격적으로 사용되기 이전, es5 에서 원하는 this 름 참조하고 싶을 경우, 2가지 방법을 사용했는데요.</li>\n<li>위와 같이 call / apply 등을 사용하거나, 상위 this 를 변수에 저장해놓고 접근하거나 했습니다.</li>\n<li>일반적으로 이러한 것이 많이 사용되는 부분은 이벤트 핸들러였습니다.</li>\n</ul>\n<h3 id=\"es6-arrow-function\" style=\"position:relative;\"><a href=\"#es6-arrow-function\" aria-label=\"es6 arrow function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6 Arrow function</h3>\n<ul>\n<li>화살표 함수는 다들 많이 사용하실 겁니다.</li>\n<li>특이하게도, 이 안에서의 this 는 항상 상위 스코프의 this 를 상속받습니다.</li>\n<li>그리고 call 등으로 this 를 바인딩할 수 없습니다.</li>\n<li>자세한 것은 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">화살표함수</a> 를 읽어보시면 도움이 됩니다.</li>\n</ul>","frontmatter":{"date":"January 03, 2022","title":"JavaScript Scope / this","categories":"javascript","author":"Juko","emoji":"🔮"},"fields":{"slug":"/javascript/"}},"site":{"siteMetadata":{"siteUrl":"https://reminiscence.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/gatsby-first-post/","nextSlug":"","prevSlug":"/javascript/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}